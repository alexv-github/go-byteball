
// converted golang begin

import(
		"crypto"
		"async"
		"db"
		"conf"
)


max_spendable_mci := nil

func calcHeadersCommissions(conn DBConnT, onDone onDoneT)  {
	// we don't require neither source nor recipient to be majority witnessed -- we don't want to return many times to the same MC index.
	console.log("will calc h-comm")
	if max_spendable_mci == nil {
		// first calc after restart only
		/* await */
		initMaxSpendableMci_sync(conn)
		return
		// << flattened continuation for initMaxSpendableMci:14:9
		calcHeadersCommissions(conn, onDone)
		// >> flattened continuation for initMaxSpendableMci:14:9
	}
	
	// max_spendable_mci is old, it was last updated after previous calc
	since_mc_index := max_spendable_mci
	
	(func () ErrorT {
	  // :: inlined async.series:19:1
	  for _f := range AsyncFunctorsT{
	  	func () ErrorT {
	  		if conf.storage == "mysql" {
	  			best_child_sql := "SELECT unit \n" +
	  				"					FROM parenthoods \n" +
	  				"					JOIN units AS alt_child_units ON parenthoods.child_unit=alt_child_units.unit \n" +
	  				"					WHERE parent_unit=punits.unit AND alt_child_units.main_chain_index-punits.main_chain_index<=1 AND +alt_child_units.sequence='good' \n" +
	  				"					ORDER BY SHA1(CONCAT(alt_child_units.unit, next_mc_units.unit)) \n" +
	  				"					LIMIT 1"
	  			// headers commissions to single unit author
	  			/* await */
	  			conn.query_sync("INSERT INTO headers_commission_contributions (unit, address, amount) \n" +
	  				"					SELECT punits.unit, address, punits.headers_commission AS hc \n" +
	  				"					FROM units AS chunits \n" +
	  				"					JOIN unit_authors USING(unit) \n" +
	  				"					JOIN parenthoods ON chunits.unit=parenthoods.child_unit \n" +
	  				"					JOIN units AS punits ON parenthoods.parent_unit=punits.unit \n" +
	  				"					JOIN units AS next_mc_units ON next_mc_units.is_on_main_chain=1 AND next_mc_units.main_chain_index=punits.main_chain_index+1 \n" +
	  				"					WHERE chunits.is_stable=1 \n" +
	  				"						AND +chunits.sequence='good' \n" +
	  				"						AND punits.main_chain_index>? \n" +
	  				"						AND chunits.main_chain_index-punits.main_chain_index<=1 \n" +
	  				"						AND +punits.sequence='good' \n" +
	  				"						AND punits.is_stable=1 \n" +
	  				"						AND next_mc_units.is_stable=1 \n" +
	  				"						AND chunits.unit=( " + best_child_sql + " ) \n" +
	  				"						AND (SELECT COUNT(*) FROM unit_authors WHERE unit=chunits.unit)=1 \n" +
	  				"						AND (SELECT COUNT(*) FROM earned_headers_commission_recipients WHERE unit=chunits.unit)=0 \n" +
	  				"					UNION ALL \n" +
	  				"					SELECT punits.unit, earned_headers_commission_recipients.address, \n" +
	  				"						ROUND(punits.headers_commission*earned_headers_commission_share/100.0) AS hc \n" +
	  				"					FROM units AS chunits \n" +
	  				"					JOIN earned_headers_commission_recipients USING(unit) \n" +
	  				"					JOIN parenthoods ON chunits.unit=parenthoods.child_unit \n" +
	  				"					JOIN units AS punits ON parenthoods.parent_unit=punits.unit \n" +
	  				"					JOIN units AS next_mc_units ON next_mc_units.is_on_main_chain=1 AND next_mc_units.main_chain_index=punits.main_chain_index+1 \n" +
	  				"					WHERE chunits.is_stable=1 \n" +
	  				"						AND +chunits.sequence='good' \n" +
	  				"						AND punits.main_chain_index>? \n" +
	  				"						AND chunits.main_chain_index-punits.main_chain_index<=1 \n" +
	  				"						AND +punits.sequence='good' \n" +
	  				"						AND punits.is_stable=1 \n" +
	  				"						AND next_mc_units.is_stable=1 \n" +
	  				"						AND chunits.unit=( " + best_child_sql + " )", DBParamsT{
	  				since_mc_index,
	  				since_mc_index,
	  			})
	  			// << flattened continuation for conn.query:29:4
	  			// :: flattened return for cb();
	  			// ** need 1 return(s) instead of 0
	  			return 
	  			// >> flattened continuation for conn.query:29:4
	  		} else {
	  			rows := /* await */
	  			conn.query_sync(// chunits is any child unit and contender for headers commission, punits is hc-payer unit
	  			"SELECT chunits.unit AS child_unit, punits.headers_commission, next_mc_units.unit AS next_mc_unit, punits.unit AS payer_unit \n" +
	  				"					FROM units AS chunits \n" +
	  				"					JOIN parenthoods ON chunits.unit=parenthoods.child_unit \n" +
	  				"					JOIN units AS punits ON parenthoods.parent_unit=punits.unit \n" +
	  				"					JOIN units AS next_mc_units ON next_mc_units.is_on_main_chain=1 AND next_mc_units.main_chain_index=punits.main_chain_index+1 \n" +
	  				"					WHERE chunits.is_stable=1 \n" +
	  				"						AND +chunits.sequence='good' \n" +
	  				"						AND punits.main_chain_index>? \n" +
	  				"						AND +punits.sequence='good' \n" +
	  				"						AND punits.is_stable=1 \n" +
	  				"						AND chunits.main_chain_index-punits.main_chain_index<=1 \n" +
	  				"						AND next_mc_units.is_stable=1", DBParamsT{ since_mc_index })
	  			// << flattened continuation for conn.query:68:4
	  			assocChildrenInfos := [*ObjectExpression*]
	  			// .. not flattening for Array.forEach
	  			for row, _ := range rows {
	  				payer_unit := row.payer_unit
	  				child_unit := row.child_unit
	  				if ! assocChildrenInfos[payer_unit] {
	  					assocChildrenInfos[payer_unit] = [*ObjectExpression*]
	  				} else {
	  					if assocChildrenInfos[payer_unit].headers_commission != row.headers_commission {
	  						_core.Throw("different headers_commission")
	  					}
	  				}
	  				row.headers_commission = nil
	  				row.payer_unit = nil
	  				assocChildrenInfos[payer_unit].children = append(assocChildrenInfos[payer_unit].children, row)
	  			}
	  			assocWonAmounts := [*ObjectExpression*]
	  			// amounts won, indexed by child unit who won the hc, and payer unit
	  			for payer_unit := range assocChildrenInfos {
	  				headers_commission := assocChildrenInfos[payer_unit].headers_commission
	  				winnerChildInfo := getWinnerInfo(assocChildrenInfos[payer_unit].children)
	  				child_unit := winnerChildInfo.child_unit
	  				if ! assocWonAmounts[child_unit] {
	  					assocWonAmounts[child_unit] = [*ObjectExpression*]
	  				}
	  				assocWonAmounts[child_unit][payer_unit] = headers_commission
	  			}
	  			//console.log(assocWonAmounts);
	  			arrWinnerUnits := Object.keys(assocWonAmounts)
	  			if len(arrWinnerUnits) == 0 {
	  				// :: flattened return for return cb();
	  				// ** need 1 return(s) instead of 0
	  				return 
	  			}
	  			strWinnerUnitsList := arrWinnerUnits.map(db.escape).join(", ")
	  			profit_distribution_rows := /* await */
	  			conn.query_sync("SELECT \n" +
	  				"								unit_authors.unit, \n" +
	  				"								unit_authors.address, \n" +
	  				"								100 AS earned_headers_commission_share \n" +
	  				"							FROM unit_authors \n" +
	  				"							LEFT JOIN earned_headers_commission_recipients USING(unit) \n" +
	  				"							WHERE unit_authors.unit IN(" + strWinnerUnitsList + ") AND earned_headers_commission_recipients.unit IS NULL \n" +
	  				"							UNION ALL \n" +
	  				"							SELECT \n" +
	  				"								unit, \n" +
	  				"								address, \n" +
	  				"								earned_headers_commission_share \n" +
	  				"							FROM earned_headers_commission_recipients \n" +
	  				"							WHERE unit IN(" + strWinnerUnitsList + ")")
	  			// << flattened continuation for conn.query:110:6
	  			arrValues := {*ArrayExpression*}
	  			// .. not flattening for Array.forEach
	  			for row, _ := range profit_distribution_rows {
	  				child_unit := row.unit
	  				for payer_unit := range assocWonAmounts[child_unit] {
	  					full_amount := assocWonAmounts[child_unit][payer_unit]
	  					if ! full_amount {
	  						_core.Throw("no amount for child unit " + child_unit + ", payer unit " + payer_unit)
	  					}
	  					// note that we round _before_ summing up header commissions won from several parent units
	  					amount := (row.earned_headers_commission_share == 100 ? full_amount: Math.round(full_amount * row.earned_headers_commission_share / 100.0))
	  					// hc outputs will be indexed by mci of _payer_ unit
	  					arrValues = append(arrValues, "('" + payer_unit + "', '" + row.address + "', " + amount + ")")
	  				}
	  			}
	  			/* await */
	  			conn.query_sync("INSERT INTO headers_commission_contributions (unit, address, amount) VALUES " + arrValues.join(", "))
	  			// << flattened continuation for conn.query:141:8
	  			// :: flattened return for cb();
	  			// ** need 1 return(s) instead of 0
	  			return 
	  			// >> flattened continuation for conn.query:141:8
	  			// >> flattened continuation for conn.query:110:6
	  			// >> flattened continuation for conn.query:68:4
	  		}
	  	},
	  	func () ErrorT {
	  		/* await */
	  		conn.query_sync("INSERT INTO headers_commission_outputs (main_chain_index, address, amount) \n" +
	  			"				SELECT main_chain_index, address, SUM(amount) FROM headers_commission_contributions JOIN units USING(unit) \n" +
	  			"				WHERE main_chain_index>? \n" +
	  			"				GROUP BY main_chain_index, address", DBParamsT{ since_mc_index })
	  		// << flattened continuation for conn.query:151:3
	  		// :: flattened return for cb();
	  		// ** need 1 return(s) instead of 0
	  		return 
	  		// >> flattened continuation for conn.query:151:3
	  	},
	  	func () ErrorT {
	  		rows := /* await */
	  		conn.query_sync("SELECT MAX(main_chain_index) AS max_spendable_mci FROM headers_commission_outputs")
	  		// << flattened continuation for conn.query:161:3
	  		max_spendable_mci = rows[0].max_spendable_mci
	  		// :: flattened return for cb();
	  		// ** need 1 return(s) instead of 0
	  		return 
	  		// >> flattened continuation for conn.query:161:3
	  	},
	  } {
	    if _err := _f() ; _err != nil { return _err }
	  }
	  return nil
	})()
}

func getWinnerInfo(arrChildren UnitsT)  {
	if len(arrChildren) == 1 {
		return arrChildren[0]
	}
	// .. not flattening for Array.forEach
	for child, _ := range arrChildren {
		child.hash = crypto.createHash("sha1").update(child.child_unit + child.next_mc_unit, "utf8").digest("hex")
	}
	( a, b ) := /* await */
	arrChildren.sort_sync()
	// << flattened continuation for arrChildren.sort:176:1
	return (a.hash < b.hash ? - 1: 1)
	// >> flattened continuation for arrChildren.sort:176:1
	return arrChildren[0]
}

func initMaxSpendableMci_sync(conn DBConnT)  {
	rows := /* await */
	conn.query_sync("SELECT MAX(main_chain_index) AS max_spendable_mci FROM headers_commission_outputs")
	// << flattened continuation for conn.query:181:1
	max_spendable_mci = rows[0].max_spendable_mci || 0
	if onDone {
		// :: flattened return for onDone();
		return 
	}
	// >> flattened continuation for conn.query:181:1
}

func getMaxSpendableMciForLastBallMci(last_ball_mci MCIndexT)  {
	return last_ball_mci - 1
}

exports.calcHeadersCommissions = calcHeadersCommissions
exports.getMaxSpendableMciForLastBallMci = getMaxSpendableMciForLastBallMci


// converted golang end

